#+NAME: Overview
#+STARTUP: overview

* Overview

** Setup

1. Run *Setup/<Distro>_setup.sh* file.
    #+BEGIN_SRC sh
    sudo Setup/<Distro>_setup.sh
    #+END_SRC
2. Create a python virtual env.
    #+BEGIN_SRC sh
    python -m venv .venv                         &&
    chmod +x .venv/bin/activate                  &&
    source .venv/bin/activate                    &&
    python -m pip install -r Python/requirements.txt
    #+END_SRC
3. *compile_commands.json* are genereated inside *build/Linux_x86_64_Release_Standalone* folder.
4. If you use clangd lsp creat a .clangd file pointing to the compile_commands.json folder.
    #+NAME: .clangd
    #+BEGIN_SRC
    CompileFlags:
      CompilationDatabase: build/Linux_x86_64_Release_Standalone
    #+END_SRC

** Requirements

 - *glslc* installed in your system. If you use a setup script it will install it for you.

** Things to think about

- Component system and component registration.
- Command system, command queue and command registation (Threaded).
- Editor Mode and Play Mode.
- File format, I bet for Usd file format.
- Edit and view modes, useful when more than one user wants to edit the same asset or scene.

** To Investigate

** References

https://github.com/mortennobel/SimpleRenderEngine

*** DLL_EXPORT
https://stackoverflow.com/a/2164853

*** GUI
https://github.com/ocornut/imgui

*** Kodi CMake multiplataforma
https://github.com/xbmc/xbmc

*** Emscripten Debug
https://emscripten.org/docs/porting/Debugging.html
https://stackoverflow.com/questions/52333308/debug-emscripten-with-visual-studio-code

https://developer.chrome.com/blog/wasm-debugging-2020/
https://goo.gle/wasm-debugging-extension

*** Glew Docs
https://glew.sourceforge.net/install.html

*** Vulkan Memory Library
https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator

*** Vulkan Memory Allocation
https://developer.nvidia.com/vulkan-memory-management
